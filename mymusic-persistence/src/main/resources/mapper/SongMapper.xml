<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.mymusic.mapper.SongMapper">
  <resultMap id="BaseResultMap" type="com.mymusic.domain.Song">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="singer_id" jdbcType="INTEGER" property="singerId" />
    <result column="name" jdbcType="VARCHAR" property="name" />
    <result column="introduction" jdbcType="VARCHAR" property="introduction" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
    <result column="pic" jdbcType="VARCHAR" property="pic" />
    <result column="url" jdbcType="VARCHAR" property="url" />
    <result column="lyric" jdbcType="LONGVARCHAR" property="lyric" />
  </resultMap>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Wed Dec 09 21:10:36 CST 2020.
    -->
    delete from song
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <insert id="insert" parameterType="com.mymusic.domain.Song">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Wed Dec 09 21:10:36 CST 2020.
    -->
    <selectKey keyProperty="id" order="BEFORE" resultType="java.lang.Long">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into song (id, singer_id, name, 
      introduction, create_time, update_time, 
      pic, url, lyric
      )
    values (#{id,jdbcType=BIGINT}, #{singerId,jdbcType=INTEGER}, #{name,jdbcType=VARCHAR},
      #{introduction,jdbcType=VARCHAR}, #{createTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP}, 
      #{pic,jdbcType=VARCHAR}, #{url,jdbcType=VARCHAR}, #{lyric,jdbcType=LONGVARCHAR}
      )
  </insert>

  <update id="updateByPrimaryKey" parameterType="com.mymusic.domain.Song">
    update song
    <set>
    <if test="singerId != null">
      singer_id = #{singerId,jdbcType=INTEGER},
    </if>
      <if test="name != null">
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="introduction != null">
        introduction = #{introduction,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="pic != null">
        pic = #{pic,jdbcType=VARCHAR},
      </if>
      <if test="url != null">
        url = #{url,jdbcType=VARCHAR},
      </if>
      <if test="lyric != null">
        lyric = #{lyric,jdbcType=LONGVARCHAR}
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>

  <!--更新歌曲的头像的信息-->
  <update id="updateSongPic" parameterType="com.mymusic.domain.Song" >
    update song
    <set >
      <if test="pic != null" >
        pic = #{pic,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>

  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">

    select id, singer_id, name, introduction, create_time, update_time, pic, url, lyric
    from song
    where id = #{id,jdbcType=BIGINT}
  </select>

  <!--根据歌曲名字或歌手名字来查询歌曲的信息-->
  <select id="querySongBySongNameOrSingerName" parameterType="java.lang.String" resultType="com.mymusic.common.domain.SongVo">
    select
    s.id,s.name as songName,s.introduction,s.pic,s.lyric,s.url,s.create_time,sg.name as singerName from song s
     left join
     singer sg  on sg.id = s.singer_id where s.name like CONCAT('%',#{queryName},'%')
  </select>

  <!--根据歌曲名返回歌曲的信息-->
  <select id="songName" parameterType="java.lang.String" resultMap="BaseResultMap">
      		   select s.id,s.name,s.introduction,s.pic,s.lyric,s.url,s.create_time from song s where s.name  like CONCAT('%',#{songName},'%')
  </select>

  <!--分页查询的实现-->
  <select id="selectSongByPage" resultType="com.mymusic.common.domain.SongVo">
 SELECT s.id,s.name as songName,s.introduction,s.pic,s.lyric,s.url,s.create_time,sg.name as singerName from song s
   left join
    singer sg  on sg.id = s.singer_id
  </select>

  <!--根据歌曲url返回歌曲的id-->
  <select id="selectSongByUrl" parameterType="java.lang.String" resultType="java.lang.Long">
       select  id from song where url = #{songUrl};
  </select>

  <!--进行的联合查询，根据歌手的id查询所属的歌曲-->
  <select id="selectSongBySingerId" parameterType="java.lang.Integer" resultType="com.mymusic.common.domain.SongVo">
  SELECT s.id,s.name as songName,s.introduction,s.pic,s.lyric,s.url,s.create_time,sg.name as singerName from song s
   left join
    singer sg  on sg.id = s.singer_id
	where sg.id = #{singerId}
  </select>

  <!--联合查询，根据歌单的id查询所属的歌曲-->
  <select id="selectSongBySongListId" parameterType="java.lang.Integer" resultType="com.mymusic.common.domain.SongVo">
 	SELECT s.id,s.name as songName,s.introduction,s.pic,s.lyric,s.url,s.create_time,sg.name as singerName from song s
    left join
    singer sg  on sg.id = s.singer_id
	left join songlist_song ss on ss.song_id = s.id
	left join song_list sl on sl.id = ss.songlist_id
	where sl.id =  #{songListId}
  </select>

<!--这两个接口需要优化-->
  <select id="getHotSong" resultType="com.mymusic.common.domain.SongVo">
      	  SELECT s.id,s.name as songName,s.introduction,s.pic,s.lyric,s.url,s.create_time from song s order by create_time desc limit 20
  </select>
  <select id="getRecommendSong" resultType="com.mymusic.common.domain.SongVo">
     SELECT s.id,s.name as songName,s.introduction,s.pic,s.lyric,s.url,s.create_time from song s order by create_time asc limit 20
  </select>

  <select id="getTotalSongs" resultType="java.lang.Long">
      select  count(1) from song;
  </select>

    <select id="getMaxPlaySongs" resultType="com.mymusic.common.domain.StatisticsVo">
          select  song.name as name ,playCount.play_count as value from song_play_count  as playCount join song on
          playCount.song_id = song.id  order by playCount.play_count desc limit 10;
    </select>

    <select id="getMaxComment" resultType="com.mymusic.common.domain.StatisticsVo">
         select song.name as name,comment.value from  song join (select count(1)as value,song_id from user_comment GROUP BY song_id )as comment on song.id = comment.song_id
         order by comment.value desc limit 10;
    </select>
</mapper>